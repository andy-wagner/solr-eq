<?xml version="1.0" encoding="UTF-8" ?>

<config>

	<schemaFactory class="ClassicIndexSchemaFactory" />

	<luceneMatchVersion>6.0.0</luceneMatchVersion>

	<!-- To enable per-field DocValues formats, SchemaCodecFactory must be configured <codecFactory class="solr.SchemaCodecFactory"/> -->

	<dataDir>${solr.data.dir:}</dataDir>

	<!-- The DirectoryFactory to use for indexes. solr.StandardDirectoryFactory is filesystem based and tries to pick the best implementation for the current 
		JVM and platform. solr.NRTCachingDirectoryFactory, the default, wraps solr.StandardDirectoryFactory and caches small files in memory for better NRT performance. 
		One can force a particular implementation via solr.MMapDirectoryFactory, solr.NIOFSDirectoryFactory, or solr.SimpleFSDirectoryFactory. solr.RAMDirectoryFactory 
		is memory based, not persistent, and doesn't work with replication. -->
	<directoryFactory name="DirectoryFactory" class="${solr.directoryFactory:solr.NRTCachingDirectoryFactory}" />

	<jmx />

	<updateHandler class="solr.DirectUpdateHandler2">

		<updateLog>
			<str name="dir">${solr.data.dir:}</str>
		</updateLog>

	</updateHandler>

	<!-- realtime get handler, guaranteed to return the latest stored fields of any document, without the need to commit or open a new searcher. The current 
		implementation relies on the updateLog feature being enabled. -->
	<requestHandler name="/get" class="solr.RealTimeGetHandler">
		<lst name="defaults">
			<str name="omitHeader">true</str>
		</lst>
	</requestHandler>

	<requestDispatcher handleSelect="true">
		<requestParsers enableRemoteStreaming="true" multipartUploadLimitInKB="2048" formdataUploadLimitInKB="2048" />
	</requestDispatcher>


	<requestHandler name="/eq_search" class="solr.SearchHandler">
		<lst name="defaults">
			<str name="echoParams">explicit</str>
			<str name="wt">json</str>
			<str name="indent">true</str>
			<str name="defType">eq_parser</str>
		</lst>
		<arr name="components">
			<str>matchQueryComp</str>
			<str>eqQueryComp</str>
			<str>mlt</str>
			<str>stats</str>
			<str>highlight</str>
			<str>facet</str>
			<str>debug</str>
		</arr>
	</requestHandler>

	<!-- COMPONENTS -->
	<searchComponent name="matchQueryComp" class="org.apache.solr.handler.component.match.MatchQueryComponent">
		<str name="config-file">match.xml</str>
	</searchComponent>

	<searchComponent name="eqQueryComp" class="org.apache.solr.handler.component.eq.EqQueryComponent" />

	<!-- QUERY RESPONSE WRITERS -->



	<!-- REQUEST HANDLERS -->

	<requestHandler name="/select" class="solr.SearchHandler">
		<!-- default values for query parameters can be specified, these will be overridden by parameters in the request -->
		<lst name="defaults">
			<str name="echoParams">explicit</str>
			<int name="rows">10</int>
		</lst>
	</requestHandler>

	<!-- A request handler that returns indented JSON by default -->
	<requestHandler name="/query" class="solr.SearchHandler">
		<lst name="defaults">
			<str name="echoParams">explicit</str>
			<str name="wt">json</str>
			<str name="indent">true</str>
			<str name="df">text</str>
		</lst>
	</requestHandler>

	<!-- The export request handler is used to export full sorted result sets. Do not change these defaults. -->
	<requestHandler name="/export" class="solr.SearchHandler">
		<lst name="invariants">
			<str name="rq">{!xport}</str>
			<str name="wt">xsort</str>
			<str name="distrib">false</str>
		</lst>

		<arr name="components">
			<str>query</str>
		</arr>
	</requestHandler>

	<initParams path="/update/**,/query,/select,/tvrh,/elevate,/spell">
		<lst name="defaults">
			<str name="df">text</str>
		</lst>
	</initParams>

	<!-- Field Analysis Request Handler RequestHandler that provides much the same functionality as analysis.jsp. Provides the ability to specify multiple 
		field types and field names in the same request and outputs index-time and query-time analysis for each of them. Request parameters are: analysis.fieldname 
		- field name whose analyzers are to be used analysis.fieldtype - field type whose analyzers are to be used analysis.fieldvalue - text for index-time analysis 
		q (or analysis.q) - text for query time analysis analysis.showmatch (true|false) - When set to true and when query analysis is performed, the produced 
		tokens of the field value analysis will be marked as "matched" for every token that is produces by the query analysis -->
	<requestHandler name="/analysis/field" startup="lazy" class="solr.FieldAnalysisRequestHandler" />


	<!-- Document Analysis Handler http://wiki.apache.org/solr/AnalysisRequestHandler An analysis handler that provides a breakdown of the analysis process 
		of provided documents. This handler expects a (single) content stream with the following format: <docs> <doc> <field name="id">1</field> <field name="name">The 
		Name</field> <field name="text">The Text Value</field> </doc> <doc>...</doc> <doc>...</doc> ... </docs> Note: Each document must contain a field which 
		serves as the unique key. This key is used in the returned response to associate an analysis breakdown to the analyzed document. Like the FieldAnalysisRequestHandler, 
		this handler also supports query analysis by sending either an "analysis.query" or "q" request parameter that holds the query text to be analyzed. It also 
		supports the "analysis.showmatch" parameter which when set to true, all field tokens that match the query tokens will be marked as a "match". -->
	<requestHandler name="/analysis/document" class="solr.DocumentAnalysisRequestHandler" startup="lazy" />

	<!-- Echo the request contents back to the client -->
	<requestHandler name="/debug/dump" class="solr.DumpRequestHandler">
		<lst name="defaults">
			<str name="echoParams">explicit</str>
			<str name="echoHandler">true</str>
		</lst>
	</requestHandler>

	<requestHandler name="/replication" class="solr.ReplicationHandler" />

	<!-- config for the admin interface -->
	<admin>
		<defaultQuery>*:*</defaultQuery>
	</admin>

	<query>
		<!-- Max Boolean Clauses Maximum number of clauses in each BooleanQuery, an exception is thrown if exceeded. ** WARNING ** This option actually modifies 
			a global Lucene property that will affect all SolrCores. If multiple solrconfig.xml files disagree on this property, the value at any given moment will 
			be based on the last SolrCore to be initialized. -->
		<maxBooleanClauses>16384</maxBooleanClauses>


		<!-- Solr Internal Query Caches There are two implementations of cache available for Solr, LRUCache, based on a synchronized LinkedHashMap, and FastLRUCache, 
			based on a ConcurrentHashMap. FastLRUCache has faster gets and slower puts in single threaded operation and thus is generally faster than LRUCache when 
			the hit ratio of the cache is high (> 75%), and may be faster under other scenarios on multi-cpu systems. -->

		<!-- Filter Cache Cache used by SolrIndexSearcher for filters (DocSets), unordered sets of *all* documents that match a query. When a new searcher is 
			opened, its caches may be prepopulated or "autowarmed" using data from caches in the old searcher. autowarmCount is the number of items to prepopulate. 
			For LRUCache, the autowarmed items will be the most recently accessed items. Parameters: class - the SolrCache implementation LRUCache or (LRUCache or 
			FastLRUCache) size - the maximum number of entries in the cache initialSize - the initial capacity (number of entries) of the cache. (see java.util.HashMap) 
			autowarmCount - the number of entries to prepopulate from and old cache. -->
		<filterCache class="solr.FastLRUCache" size="1024" initialSize="1024" autowarmCount="0" />

		<fieldValueCache class="solr.FastLRUCache" size="512" initialSize="512" autowarmCount="0" />

		<!-- Query Result Cache Caches results of searches - ordered lists of document ids (DocList) based on a query, a sort, and the range of documents requested. -->
		<queryResultCache class="solr.LRUCache" size="512" initialSize="512" autowarmCount="0" />

		<!-- Document Cache Caches Lucene Document objects (the stored fields for each document). Since Lucene internal document ids are transient, this cache 
			will not be autowarmed. -->
		<documentCache class="solr.LRUCache" size="768" initialSize="768" autowarmCount="0" />

		<!-- custom cache currently used by block join -->
		<cache name="perSegFilter" class="solr.search.LRUCache" size="10" initialSize="0" autowarmCount="10" regenerator="solr.NoOpRegenerator" />

		<!-- Lazy Field Loading If true, stored fields that are not requested will be loaded lazily. This can result in a significant speed improvement if the 
			usual case is to not load all stored fields, especially if the skipped fields are large compressed text fields. -->
		<enableLazyFieldLoading>true</enableLazyFieldLoading>

		<!-- Result Window Size An optimization for use with the queryResultCache. When a search is requested, a superset of the requested number of document 
			ids are collected. For example, if a search for a particular query requests matching documents 10 through 19, and queryWindowSize is 50, then documents 
			0 through 49 will be collected and cached. Any further requests in that range can be satisfied via the cache. -->
		<queryResultWindowSize>20</queryResultWindowSize>

		<!-- Maximum number of documents to cache for any entry in the queryResultCache. -->
		<queryResultMaxDocsCached>200</queryResultMaxDocsCached>

		<!-- Use Cold Searcher If a search request comes in and there is no current registered searcher, then immediately register the still warming searcher 
			and use it. If "false" then all requests will block until the first searcher is done warming. -->
		<useColdSearcher>false</useColdSearcher>

		<!-- Max Warming Searchers Maximum number of searchers that may be warming in the background concurrently. An error is returned if this limit is exceeded. 
			Recommend values of 1-2 for read-only slaves, higher for masters w/o cache warming. -->
		<maxWarmingSearchers>2</maxWarmingSearchers>

	</query>

	<!-- <query> Internal cache used by SolrIndexSearcher for filters (DocSets), unordered sets of *all* documents that match a query. When a new searcher 
		is opened, its caches may be prepopulated or "autowarmed" using data from caches in the old searcher. autowarmCount is the number of items to prepopulate. 
		For LRUCache, the prepopulated items will be the most recently accessed items. <filterCache class="solr.FastLRUCache" size="16384" initialSize="4096" autowarmCount="4096" 
		/> queryResultCache caches results of searches - ordered lists of document ids (DocList) based on a query, a sort, and the range of documents requested. 
		<queryResultCache class="solr.FastLRUCache" size="16384" initialSize="4096" autowarmCount="1024" /> documentCache caches Lucene Document objects (the stored 
		fields for each document). <documentCache class="solr.FastLRUCache" size="16384" initialSize="4096" autowarmCount="1024" /> <fieldValueCache class="solr.FastLRUCache" 
		size="16384" autowarmCount="4096" showItems="1024" /> <maxBooleanClauses>1024</maxBooleanClauses> </query> -->
	<!-- ping/healthcheck - for Nagios monitorin! -->
	<requestHandler name="/admin/ping" class="solr.PingRequestHandler">
		<lst name="invariants">
			<str name="q">solrpingquery</str>
		</lst>
		<lst name="defaults">
			<str name="echoParams">all</str>
			<str name="df">titel_suche</str>
		</lst>
	</requestHandler>

	<requestHandler name="/admin/luke" class="org.apache.solr.handler.admin.LukeRequestHandler" />

</config>
